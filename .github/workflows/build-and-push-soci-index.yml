name: Build and push SOCI index

on:
  workflow_call:
    inputs:
      artifactory_registry_url:
        description: 'Registry URL for JFrog Artifactory e.g tfy.jfrog.io'
        required: true
        type: string
      artifactory_repository_url:
        description: 'Repository url for JFrog Artifactory e.g tfy.jfrog.io/tfy-images'
        required: true
        type: string
      image_artifact_name:
        description: 'Name of the image artifact, usually the repository name e.g mlfoundry-server'
        required: true
        type: string
      enable_ecr:
        description: 'Enable push to ECR'
        required: false
        type: boolean
        default: false
      aws_ecr_region:
        description: 'AWS Public ECR region'
        required: false
        type: string
        default: 'us-east-1'
      image_tag:
        description: 'Image tag for the image to be pushed'
        required: true
        type: string
      platforms:
        description: 'Platforms for the image to be mirrored'
        required: false
        type: string
        default: 'linux/amd64,linux/arm64'
      free_disk_space:
        description: 'Free disk space on the runner'
        required: false
        type: boolean
        default: false
      free_disk_space_docker_images:
        description: 'Free disk space for Docker images'
        required: false
        type: boolean
        default: false
      free_disk_space_tool_cache_storage:
        description: 'Free disk space for tool cache storage'
        required: false
        type: boolean
        default: false
      free_disk_space_large_packages:
        description: 'Free disk space for large packages'
        required: false
        type: boolean
        default: false
    secrets:
      artifactory_username:
        description: 'Artifactory username'
        required: true
      artifactory_password:
        description: 'Artifactory password'
        required: true

jobs:
  build:
    defaults:
      run:
        shell: bash
    name: Build and Push SOCI Index to JFrog Artifactory
    runs-on: ubuntu-latest
    env:
      IMAGE_ARTIFACT_URL: ${{ inputs.artifactory_repository_url }}/${{ inputs.image_artifact_name }}
    steps:
      - name: Free Disk Space (Ubuntu)
        if: ${{ inputs.free_disk_space }}
        uses: jlumbroso/free-disk-space@main
        with:
          android: true
          dotnet: true
          haskell: true
          large-packages: ${{ inputs.free_disk_space_large_packages }}
          docker-images: ${{ inputs.free_disk_space_docker_images }}
          tool-cache: ${{ inputs.free_disk_space_tool_cache_storage }}

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download containerd and nerdctl
        run: |
          cd /tmp

          mkdir -p /tmp/containerd
          curl -L -o containerd.tar.gz https://github.com/containerd/containerd/releases/download/v2.1.1/containerd-2.1.1-linux-amd64.tar.gz
          tar -C /tmp/containerd -xzf containerd.tar.gz
          chmod +x /tmp/containerd/bin/*
          sudo cp /tmp/containerd/bin/* /usr/local/bin/

          mkdir -p /tmp/nerdctl
          curl -L -o nerdctl.tar.gz https://github.com/containerd/nerdctl/releases/download/v2.1.2/nerdctl-2.1.2-linux-amd64.tar.gz
          tar -C /tmp/nerdctl -xzf nerdctl.tar.gz
          chmod +x /tmp/nerdctl/*
          sudo cp /tmp/nerdctl/* /usr/local/bin/

      - name: Login to artifactory_repository_url as current user and root
        if: ${{ inputs.enable_ecr != true }}
        run: |
          # needed for pushing images / SOCI indexes which run as the current user
          echo ${{ secrets.artifactory_password }} | nerdctl login -u ${{ secrets.artifactory_username }} --password-stdin ${{ inputs.artifactory_repository_url }}
          # needed the SOCI snapshotter which runs as root
          echo ${{ secrets.artifactory_password }} | sudo nerdctl login -u ${{ secrets.artifactory_username }} --password-stdin ${{ inputs.artifactory_repository_url }}
      
      - name: configure aws credentials
        if: ${{ inputs.enable_ecr }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::526077812922:role/github-actions-oidc-access-to-public-ecr-role"
          aws-region: ${{ inputs.aws_ecr_region }}
      
      - name: Login to AWS ECR as current user and root
        if: ${{ inputs.enable_ecr }}
        run: |
          # needed for pushing images / SOCI indexes which run as the current user
          aws ecr get-login-password --region ${{ inputs.aws_ecr_region }}  | nerdctl login --username AWS --password-stdin ${{ inputs.artifactory_registry_url }}
          # needed the SOCI snapshotter which runs as root
          aws ecr get-login-password --region ${{ inputs.aws_ecr_region }}  | sudo nerdctl login --username AWS --password-stdin ${{ inputs.artifactory_registry_url }}

      - name: Download soci-snapshotter
        run: |
          cd /tmp

          mkdir -p /tmp/soci-snapshotter
          curl -L -o soci-snapshotter.tar.gz https://github.com/awslabs/soci-snapshotter/releases/download/v0.9.0/soci-snapshotter-0.9.0-linux-amd64-static.tar.gz
          tar -C /tmp/soci-snapshotter -xzf soci-snapshotter.tar.gz
          chmod +x /tmp/soci-snapshotter/soci
          chmod +x /tmp/soci-snapshotter/soci-snapshotter-grpc
          sudo cp /tmp/soci-snapshotter/soci /usr/local/bin/
          sudo cp /tmp/soci-snapshotter/soci-snapshotter-grpc /usr/local/bin/
          sudo soci --help

      - name: Build and Push SOCI index
        run: |
          IFS=',' read -ra PLATFORMS <<< "${{ inputs.platforms }}"
          for platform in "${PLATFORMS[@]}"; do
            echo "Pulling image for platform: $platform"
            sudo nerdctl pull --quiet --platform $platform "${{ env.IMAGE_ARTIFACT_URL }}:${{ inputs.image_tag }}"
            echo "Pushing soci index for platform: $platform"
            sudo soci create --platform=$platform "${{ env.IMAGE_ARTIFACT_URL }}:${{ inputs.image_tag }}"
            sudo soci push --platform=$platform "${{ env.IMAGE_ARTIFACT_URL }}:${{ inputs.image_tag }}"
            echo "Removing image for platform: $platform"
            sudo nerdctl rmi "${{ env.IMAGE_ARTIFACT_URL }}:${{ inputs.image_tag }}"
          done
